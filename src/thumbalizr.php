<?php

// namespace Thumbalizr;

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Thumbalizr is a package to use the Thumbalizr screenshot service API.
 *
 * Thumbalizr (https://thumbalizr.com/) is a web service to easily embed live 
 * screenshots of any URL in your website. Thumbalizr has full support for 
 * Flash, JavaScript, CSS, & HTML5.
 *
 * @category  Services
 * @package   Thumbalizr
 * @author    Julien Sobrier <julien@sobrier.net>
 * @copyright 2019 Julien Sobrier, Browshot
 * @license   http://www.opensource.org/licenses/mit-license.html MIT License
 * @version   1.0.0
 * @link      http://thumbalizr.com/
 * @link      http://thumbalizr.com/api/documentation
 * @link      https://github.com/juliensobrier/thumbalizr-php
 */

class Thumbalizr
{
	const version = '1.0.0';

	/**
	 * Constructor
	 *
	 * IMPORTANT: the order of the arguments base and debug has been switched
	 * @param  string Thumbalizr API key
	 * @param  string Thumbalizr secret
	 * @param  int    Set to 1 to print debug output to the standard output. 0 (disabled) by default.
	 * @param  string Optional. Base URL for all API requests. You should use the default base provided by the library.
	 */	
	public function __construct($key, $secret, $debug = 0, $base = 'https://api.thumbalizr.com/api/v1/embed')
	{
		$this->_key = $key;
		$this->_secret = $secret;
		$this->_base = $base;
		$this->_debug = $debug;


	}
	
	/**
	* Generate the URL of the Thumbalizr image.
	*
	* @param string URL of the website to create a screenshot of.
	* @param array See <a href="https://thumbalizr.com/api/documentation">https://thumbalizr.com/api/documentation</a> for the list of possible arguments.
	*
	* @return string
	*/
	public function url($url, $parameters = array())
	{
		$query = 'url=' . urlencode($url);
	
		foreach($parameters as $key => $value) { 
			$query .= '&' . trim($key) . '=' . urlencode(trim($value)); 
		}
	
		$token = md5($query . $this->_secret);
	
		return $this->_base . "/" . $this->_key . "/$token/?$query";
	}

	/**
	* Download the Thumbalizr URL generated by url()
	*
	* @param string humbalizr url
  * @param string (optional) local filename to tave the image file.
	*
	* @return array Status of the screenshot: OK, FAILED or QUEUED
  *               Image content  (if file is not specified) or the file name provided. This value is empty is the screenshot failed or is not finished (QUEUED)
	*/
	public function download($url, $file = '')
	{
		$res = $this->http_get($url);

		if ($res['error'] == '')
		{
			if ($res['status'] == 'OK' && $file != '') {
				$fp = fopen($file, 'w');
				fwrite($fp, $res['body']);
				fclose($fp);
				
				return array($res['status'], $file);
			}
		
			return array($res['status'], $res['body']);
		} 
		else
		{
			$this->error("Thumbnail failed: " . $res['error']);
			return array($res['status'], '');
		}
	}

	/**
	* Download the Thumbalizr URL generated by url(). Unline download(), this function waits for the screenshot to be finished or failed.
	*
	* @param string humbalizr url
  * @param string (optional) local filename to tave the image file.
	*
	* @return array Status of the screenshot: OK, FAILED or QUEUED
  *               Image content  (if file is not specified) or the file name provided. This value is empty is the screenshot failed or is not finished (QUEUED)
	*/
	public function download_wait($url, $file = '')
	{
		$res = $this->download($url, $file);
		
		while ($res[0] == 'QUEUED') {
			$this->info("Waiting...");
			sleep(10);
			
			$res = $this->download($url, $file);
		}
		
		return $res;
	}

	
	private function info($message)
	{
		if ($this->_debug == 1) {
			echo $message . "\n";
		}
	
		return '';
	}

	private function error($message)
	{
// 		$this->last_error = $message;

		if ($this->_debug == 1) {
			echo $message . "\n";
		}
	
		return '';
	}

	private function http_get($url)
	{
// 			$headers = [];
			$result = array( 
              'body' 	=> '',
              'error' => '',
              'http_code' => '',
              'status' => ''
	    );
	
	    $ch = curl_init($url);
	    curl_setopt($ch, CURLOPT_HEADER, false); 
	    curl_setopt($ch, CURLOPT_TIMEOUT, 250); 
	    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 
	    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
	    curl_setopt($ch, CURLOPT_MAXREDIRS, 32);
	    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); 
	    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2); 
	    curl_setopt($ch, CURLOPT_HTTPHEADER, array("User-Agent: 'PHP Thumbalizr " . Thumbalizr::version, "Connection: Keep-Alive"));
	    //curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);
	    //curl_setopt($ch, CURLOPT_VERBOSE, true);
	    curl_setopt($ch, CURLOPT_HEADERFUNCTION,
				function($curl, $header) use (&$headers)
				{
					$len = strlen($header);
					$header = explode(':', $header, 2);
					if (count($header) < 2) // ignore invalid headers
						return $len;
					
					if ($header[0] == 'X-Thumbalizr-Error') {
						$result['error'] = trim($header[1]);
// 						$this->info($header[0]);
					}
					if ($header[0] == 'X-Thumbalizr-Status') {
						$result['status'] = trim($header[1]);
// 						$this->info($header[0]);
					}

					return $len;
				}
			);

	    $response = curl_exec($ch);
	    
	    $error = curl_error($ch);

	    if ($error != "" && $result['error'] == '') {
	      $result['error'] = $error;
	      $result['status'] = 'FAILED';
	      curl_close($ch);

	      return $result;
	    }

	    $result['body'] = $response;
	    $result['http_code'] = curl_getinfo($ch,CURLINFO_HTTP_CODE);

	    curl_close($ch);
	    return $result;
	}
}

?>
